{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\n\nvar FaceFeatureExtractor =\n/** @class */\nfunction (_super) {\n  __extends(FaceFeatureExtractor, _super);\n\n  function FaceFeatureExtractor() {\n    return _super.call(this, 'FaceFeatureExtractor') || this;\n  }\n\n  FaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock4(normalized, params.dense0, true);\n      out = denseBlock4(out, params.dense1);\n      out = denseBlock4(out, params.dense2);\n      out = denseBlock4(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n      return out;\n    });\n  };\n\n  FaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  FaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_model';\n  };\n\n  FaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n\n  FaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  return FaceFeatureExtractor;\n}(NeuralNetwork);\n\nexport { FaceFeatureExtractor };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AAEA,SAA8BC,UAA9B,QAAgD,QAAhD;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,0BAAT,QAA2C,8BAA3C;;AAGA;AAAA;AAAA;AAA0CC;;AAExC;WACEC,kBAAM,sBAAN,KAA6B;AAC9B;;AAEMC,gDAAP,UAAoBC,KAApB,EAAmC;AAEzB;;AAER,QAAI,CAACC,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,WAAOZ,EAAE,CAACa,IAAH,CAAQ;AACb,UAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAN,CAAoB,GAApB,EAAyB,IAAzB,CAApB;AACA,UAAMC,OAAO,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB;AACA,UAAMC,UAAU,GAAGd,SAAS,CAACW,WAAD,EAAcE,OAAd,CAAT,CAAgCE,GAAhC,CAAoClB,EAAE,CAACmB,MAAH,CAAU,GAAV,CAApC,CAAnB;AAEA,UAAIC,GAAG,GAAGhB,WAAW,CAACa,UAAD,EAAaN,MAAM,CAACU,MAApB,EAA4B,IAA5B,CAArB;AACAD,SAAG,GAAGhB,WAAW,CAACgB,GAAD,EAAMT,MAAM,CAACW,MAAb,CAAjB;AACAF,SAAG,GAAGhB,WAAW,CAACgB,GAAD,EAAMT,MAAM,CAACY,MAAb,CAAjB;AACAH,SAAG,GAAGhB,WAAW,CAACgB,GAAD,EAAMT,MAAM,CAACa,MAAb,CAAjB;AACAJ,SAAG,GAAGpB,EAAE,CAACyB,OAAH,CAAWL,GAAX,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,EAAgC,OAAhC,CAAN;AAEA,aAAOA,GAAP;AACD,KAZM,CAAP;AAaD,GArBM;;AAuBMX,2CAAb,UAAqBC,KAArB,EAAqC;;;;;;;AAC5BgB,sBAAKC,YAAL;AAAkB;AAAA;AAAA,cAAM1B,UAAU,CAACS,KAAD,CAAhB;;;AAAzB;AAAA;AAAA,cAAOgB,eAAI,CAAcE,SAAd,CAAJ,CAAP;;;;AACD,GAFY;;AAIHnB,uDAAV;AACE,WAAO,8BAAP;AACD,GAFS;;AAIAA,8DAAV,UAAqCoB,SAArC,EAAiE;AAC/D,WAAOvB,0BAA0B,CAACuB,SAAD,CAAjC;AACD,GAFS;;AAIApB,iDAAV,UAAwBqB,OAAxB,EAA6C;AAC3C,WAAOzB,aAAa,CAACyB,OAAD,CAApB;AACD,GAFS;;AAGZ;AA5CA,EAA0C5B,aAA1C","names":["tf","toNetInput","NeuralNetwork","normalize","denseBlock4","extractParams","extractParamsFromWeigthMap","__extends","_super","FaceFeatureExtractor","input","params","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","out","dense0","dense1","dense2","dense3","avgPool","_a","forwardInput","_b","weightMap","weights"],"sources":["../../../src/faceFeatureExtractor/FaceFeatureExtractor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}