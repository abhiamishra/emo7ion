{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { extendWithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderTask, PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\n\nvar PredictFaceExpressionsTaskBase =\n/** @class */\nfunction (_super) {\n  __extends(PredictFaceExpressionsTaskBase, _super);\n\n  function PredictFaceExpressionsTaskBase(parentTask, input, extractedFaces) {\n    var _this = _super.call(this) || this;\n\n    _this.parentTask = parentTask;\n    _this.input = input;\n    _this.extractedFaces = extractedFaces;\n    return _this;\n  }\n\n  return PredictFaceExpressionsTaskBase;\n}(ComposableTask);\n\nexport { PredictFaceExpressionsTaskBase };\n\nvar PredictAllFaceExpressionsTask =\n/** @class */\nfunction (_super) {\n  __extends(PredictAllFaceExpressionsTask, _super);\n\n  function PredictAllFaceExpressionsTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PredictAllFaceExpressionsTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResults, faceExpressionsByFace;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.parentTask];\n\n          case 1:\n            parentResults = _a.sent();\n            return [4\n            /*yield*/\n            , extractAllFacesAndComputeResults(parentResults, this.input, function (faces) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , Promise.all(faces.map(function (face) {\n                        return nets.faceExpressionNet.predictExpressions(face);\n                      }))];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.sent()];\n                  }\n                });\n              });\n            }, this.extractedFaces)];\n\n          case 2:\n            faceExpressionsByFace = _a.sent();\n            return [2\n            /*return*/\n            , parentResults.map(function (parentResult, i) {\n              return extendWithFaceExpressions(parentResult, faceExpressionsByFace[i]);\n            })];\n        }\n      });\n    });\n  };\n\n  PredictAllFaceExpressionsTask.prototype.withAgeAndGender = function () {\n    return new PredictAllAgeAndGenderTask(this, this.input);\n  };\n\n  return PredictAllFaceExpressionsTask;\n}(PredictFaceExpressionsTaskBase);\n\nexport { PredictAllFaceExpressionsTask };\n\nvar PredictSingleFaceExpressionsTask =\n/** @class */\nfunction (_super) {\n  __extends(PredictSingleFaceExpressionsTask, _super);\n\n  function PredictSingleFaceExpressionsTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PredictSingleFaceExpressionsTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResult, faceExpressions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.parentTask];\n\n          case 1:\n            parentResult = _a.sent();\n\n            if (!parentResult) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , extractSingleFaceAndComputeResult(parentResult, this.input, function (face) {\n              return nets.faceExpressionNet.predictExpressions(face);\n            }, this.extractedFaces)];\n\n          case 2:\n            faceExpressions = _a.sent();\n            return [2\n            /*return*/\n            , extendWithFaceExpressions(parentResult, faceExpressions)];\n        }\n      });\n    });\n  };\n\n  PredictSingleFaceExpressionsTask.prototype.withAgeAndGender = function () {\n    return new PredictSingleAgeAndGenderTask(this, this.input);\n  };\n\n  return PredictSingleFaceExpressionsTask;\n}(PredictFaceExpressionsTaskBase);\n\nexport { PredictSingleFaceExpressionsTask };\n\nvar PredictAllFaceExpressionsWithFaceAlignmentTask =\n/** @class */\nfunction (_super) {\n  __extends(PredictAllFaceExpressionsWithFaceAlignmentTask, _super);\n\n  function PredictAllFaceExpressionsWithFaceAlignmentTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PredictAllFaceExpressionsWithFaceAlignmentTask.prototype.withAgeAndGender = function () {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n\n  PredictAllFaceExpressionsWithFaceAlignmentTask.prototype.withFaceDescriptors = function () {\n    return new ComputeAllFaceDescriptorsTask(this, this.input);\n  };\n\n  return PredictAllFaceExpressionsWithFaceAlignmentTask;\n}(PredictAllFaceExpressionsTask);\n\nexport { PredictAllFaceExpressionsWithFaceAlignmentTask };\n\nvar PredictSingleFaceExpressionsWithFaceAlignmentTask =\n/** @class */\nfunction (_super) {\n  __extends(PredictSingleFaceExpressionsWithFaceAlignmentTask, _super);\n\n  function PredictSingleFaceExpressionsWithFaceAlignmentTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PredictSingleFaceExpressionsWithFaceAlignmentTask.prototype.withAgeAndGender = function () {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n\n  PredictSingleFaceExpressionsWithFaceAlignmentTask.prototype.withFaceDescriptor = function () {\n    return new ComputeSingleFaceDescriptorTask(this, this.input);\n  };\n\n  return PredictSingleFaceExpressionsWithFaceAlignmentTask;\n}(PredictSingleFaceExpressionsTask);\n\nexport { PredictSingleFaceExpressionsWithFaceAlignmentTask };","map":{"version":3,"mappings":"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","names":["extendWithFaceExpressions","ComposableTask","ComputeAllFaceDescriptorsTask","ComputeSingleFaceDescriptorTask","extractAllFacesAndComputeResults","extractSingleFaceAndComputeResult","nets","PredictAllAgeAndGenderTask","PredictAllAgeAndGenderWithFaceAlignmentTask","PredictSingleAgeAndGenderTask","PredictSingleAgeAndGenderWithFaceAlignmentTask","__extends","parentTask","input","extractedFaces","_super","_this","PredictAllFaceExpressionsTask","parentResults","_a","faces","Promise","all","map","faceExpressionNet","predictExpressions","face","faceExpressionsByFace","parentResult","i","PredictFaceExpressionsTaskBase","PredictSingleFaceExpressionsTask","faceExpressions","PredictAllFaceExpressionsWithFaceAlignmentTask","PredictSingleFaceExpressionsWithFaceAlignmentTask"],"sources":["../../../src/globalApi/PredictFaceExpressionsTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}