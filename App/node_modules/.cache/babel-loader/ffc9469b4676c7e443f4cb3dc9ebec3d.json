{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { seperateWeightMaps } from '../faceProcessor/util';\nimport { TinyXception } from '../xception/TinyXception';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { Gender } from './types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { NetInput, toNetInput } from '../dom';\n\nvar AgeGenderNet =\n/** @class */\nfunction (_super) {\n  __extends(AgeGenderNet, _super);\n\n  function AgeGenderNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new TinyXception(2);\n    }\n\n    var _this = _super.call(this, 'AgeGenderNet') || this;\n\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n\n  Object.defineProperty(AgeGenderNet.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AgeGenderNet.prototype.runNet = function (input) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      var pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1);\n      var age = fullyConnectedLayer(pooled, params.fc.age).as1D();\n      var gender = fullyConnectedLayer(pooled, params.fc.gender);\n      return {\n        age: age,\n        gender: gender\n      };\n    });\n  };\n\n  AgeGenderNet.prototype.forwardInput = function (input) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var _a = _this.runNet(input),\n          age = _a.age,\n          gender = _a.gender;\n\n      return {\n        age: age,\n        gender: tf.softmax(gender)\n      };\n    });\n  };\n\n  AgeGenderNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  AgeGenderNet.prototype.predictAgeAndGender = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _a.sent();\n            return [4\n            /*yield*/\n            , this.forwardInput(netInput)];\n\n          case 2:\n            out = _a.sent();\n            ages = tf.unstack(out.age);\n            genders = tf.unstack(out.gender);\n            ageAndGenderTensors = ages.map(function (ageTensor, i) {\n              return {\n                ageTensor: ageTensor,\n                genderTensor: genders[i]\n              };\n            });\n            return [4\n            /*yield*/\n            , Promise.all(ageAndGenderTensors.map(function (_a) {\n              var ageTensor = _a.ageTensor,\n                  genderTensor = _a.genderTensor;\n              return __awaiter(_this, void 0, void 0, function () {\n                var age, probMale, isMale, gender, genderProbability;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , ageTensor.data()];\n\n                    case 1:\n                      age = _b.sent()[0];\n                      return [4\n                      /*yield*/\n                      , genderTensor.data()];\n\n                    case 2:\n                      probMale = _b.sent()[0];\n                      isMale = probMale > 0.5;\n                      gender = isMale ? Gender.MALE : Gender.FEMALE;\n                      genderProbability = isMale ? probMale : 1 - probMale;\n                      ageTensor.dispose();\n                      genderTensor.dispose();\n                      return [2\n                      /*return*/\n                      , {\n                        age: age,\n                        gender: gender,\n                        genderProbability: genderProbability\n                      }];\n                  }\n                });\n              });\n            }))];\n\n          case 3:\n            predictionsByBatch = _a.sent();\n            out.age.dispose();\n            out.gender.dispose();\n            return [2\n            /*return*/\n            , netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n\n  AgeGenderNet.prototype.getDefaultModelName = function () {\n    return 'age_gender_model';\n  };\n\n  AgeGenderNet.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n\n  AgeGenderNet.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n        params = _a.params,\n        paramMappings = _a.paramMappings;\n\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n\n  AgeGenderNet.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  AgeGenderNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n        featureExtractorMap = _a.featureExtractorMap,\n        classifierMap = _a.classifierMap;\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n\n  AgeGenderNet.prototype.extractParams = function (weights) {\n    var classifierWeightSize = 512 * 1 + 1 + (512 * 2 + 2);\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n\n  return AgeGenderNet;\n}(NeuralNetwork);\n\nexport { AgeGenderNet };","map":{"version":3,"mappings":"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","names":["tf","fullyConnectedLayer","seperateWeightMaps","TinyXception","extractParams","extractParamsFromWeigthMap","Gender","NeuralNetwork","NetInput","toNetInput","__extends","faceFeatureExtractor","_super","_this","_faceFeatureExtractor","Object","AgeGenderNet","input","params","Error","_name","tidy","bottleneckFeatures","forwardInput","pooled","avgPool","as2D","shape","age","fc","as1D","gender","softmax","_a","_b","netInput","out","ages","unstack","genders","ageAndGenderTensors","map","ageTensor","i","genderTensor","Promise","all","data","probMale","isMale","MALE","FEMALE","genderProbability","dispose","predictionsByBatch","isBatchInput","throwOnRedispose","call","weights","paramMappings","_params","_paramMappings","weightMap","featureExtractorMap","classifierMap","loadFromWeightMap","classifierWeightSize","featureExtractorWeights","slice","length","classifierWeights","extractWeights","extractClassifierParams"],"sources":["../../../src/ageGenderNet/AgeGenderNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}