{"ast":null,"code":"var assert = require('assert');\n\nmodule.exports = compare;\n\nfunction compare(a, b) {\n  a = hexToBinary(a);\n  b = hexToBinary(b);\n  assert.equal(a.length, b.length, 'Argument must have equal lengths.');\n  return hammingDistance(a, b);\n}\n\nvar lookup = {\n  '0': '0000',\n  '1': '0001',\n  '2': '0010',\n  '3': '0011',\n  '4': '0100',\n  '5': '0101',\n  '6': '0110',\n  '7': '0111',\n  '8': '1000',\n  '9': '1001',\n  'a': '1010',\n  'b': '1011',\n  'c': '1100',\n  'd': '1101',\n  'e': '1110',\n  'f': '1111',\n  'A': '1010',\n  'B': '1011',\n  'C': '1100',\n  'D': '1101',\n  'E': '1110',\n  'F': '1111'\n};\n\nfunction hexToBinary(s) {\n  if (Buffer.isBuffer(s)) s = s.toString('hex');\n  s = s.replace(/^0x/, '');\n  assert(/^[0-9a-fA-F]+$/.test(s));\n  var ret = '';\n\n  for (var i = 0; i < s.length; i++) ret += lookup[s[i]];\n\n  return ret;\n}\n\nfunction hammingDistance(a, b) {\n  a = hexToBinary(a);\n  b = hexToBinary(b);\n  var count = 0;\n\n  for (var i = 0; i < a.length; i++) if (a[i] !== b[i]) count++;\n\n  return count;\n}","map":{"version":3,"sources":["/Users/akshitaanand/Documents/GitHub/emotion/App/node_modules/hamming-distance/index.js"],"names":["assert","require","module","exports","compare","a","b","hexToBinary","equal","length","hammingDistance","lookup","s","Buffer","isBuffer","toString","replace","test","ret","i","count"],"mappings":"AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrBD,EAAAA,CAAC,GAAGE,WAAW,CAACF,CAAD,CAAf;AACAC,EAAAA,CAAC,GAAGC,WAAW,CAACD,CAAD,CAAf;AACAN,EAAAA,MAAM,CAACQ,KAAP,CAAaH,CAAC,CAACI,MAAf,EAAuBH,CAAC,CAACG,MAAzB,EAAiC,mCAAjC;AACA,SAAOC,eAAe,CAACL,CAAD,EAAIC,CAAJ,CAAtB;AACD;;AAED,IAAIK,MAAM,GAAG;AACX,OAAK,MADM;AAEX,OAAK,MAFM;AAGX,OAAK,MAHM;AAIX,OAAK,MAJM;AAKX,OAAK,MALM;AAMX,OAAK,MANM;AAOX,OAAK,MAPM;AAQX,OAAK,MARM;AASX,OAAK,MATM;AAUX,OAAK,MAVM;AAWX,OAAK,MAXM;AAYX,OAAK,MAZM;AAaX,OAAK,MAbM;AAcX,OAAK,MAdM;AAeX,OAAK,MAfM;AAgBX,OAAK,MAhBM;AAiBX,OAAK,MAjBM;AAkBX,OAAK,MAlBM;AAmBX,OAAK,MAnBM;AAoBX,OAAK,MApBM;AAqBX,OAAK,MArBM;AAsBX,OAAK;AAtBM,CAAb;;AAyBA,SAASJ,WAAT,CAAqBK,CAArB,EAAwB;AACtB,MAAIC,MAAM,CAACC,QAAP,CAAgBF,CAAhB,CAAJ,EAAwBA,CAAC,GAAGA,CAAC,CAACG,QAAF,CAAW,KAAX,CAAJ;AACxBH,EAAAA,CAAC,GAAGA,CAAC,CAACI,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAJ;AACAhB,EAAAA,MAAM,CAAC,iBAAiBiB,IAAjB,CAAsBL,CAAtB,CAAD,CAAN;AACA,MAAIM,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,CAAC,CAACH,MAAtB,EAA8BU,CAAC,EAA/B,EAAmCD,GAAG,IAAIP,MAAM,CAACC,CAAC,CAACO,CAAD,CAAF,CAAb;;AACnC,SAAOD,GAAP;AACD;;AAED,SAASR,eAAT,CAAyBL,CAAzB,EAA4BC,CAA5B,EAA+B;AAC7BD,EAAAA,CAAC,GAAGE,WAAW,CAACF,CAAD,CAAf;AACAC,EAAAA,CAAC,GAAGC,WAAW,CAACD,CAAD,CAAf;AACA,MAAIc,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,CAAC,CAACI,MAAtB,EAA8BU,CAAC,EAA/B,EAAmC,IAAId,CAAC,CAACc,CAAD,CAAD,KAASb,CAAC,CAACa,CAAD,CAAd,EAAmBC,KAAK;;AAC3D,SAAOA,KAAP;AACD","sourcesContent":["\nvar assert = require('assert');\n\nmodule.exports = compare;\n\nfunction compare(a, b) {\n  a = hexToBinary(a)\n  b = hexToBinary(b)\n  assert.equal(a.length, b.length, 'Argument must have equal lengths.');\n  return hammingDistance(a, b);\n}\n\nvar lookup = {\n  '0': '0000',\n  '1': '0001',\n  '2': '0010',\n  '3': '0011',\n  '4': '0100',\n  '5': '0101',\n  '6': '0110',\n  '7': '0111',\n  '8': '1000',\n  '9': '1001',\n  'a': '1010',\n  'b': '1011',\n  'c': '1100',\n  'd': '1101',\n  'e': '1110',\n  'f': '1111',\n  'A': '1010',\n  'B': '1011',\n  'C': '1100',\n  'D': '1101',\n  'E': '1110',\n  'F': '1111'\n};\n\nfunction hexToBinary(s) {\n  if (Buffer.isBuffer(s)) s = s.toString('hex');\n  s = s.replace(/^0x/, '');\n  assert(/^[0-9a-fA-F]+$/.test(s));\n  var ret = '';\n  for (var i = 0; i < s.length; i++) ret += lookup[s[i]];\n  return ret;\n}\n\nfunction hammingDistance(a, b) {\n  a = hexToBinary(a);\n  b = hexToBinary(b);\n  var count = 0;\n  for (var i = 0; i < a.length; i++) if (a[i] !== b[i]) count++;\n  return count;\n}\n"]},"metadata":{},"sourceType":"script"}