{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hurle\\\\School\\\\Spring 2022\\\\AIM\\\\emo7ion3\\\\emo7ion\\\\App\\\\src\\\\pages\\\\video.js\";\nimport React from 'react'; //var cv = require('./video_files/opencv.js')\n//var Utils = require('./video_files/opencv.js')\n//var myHTML = require('../../public/open_faces.html');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Video extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"cam_input\",\n        height: \"240\",\n        width: \"320\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas_output\",\n        height: \"240\",\n        width: \"320\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  /*\r\n  openCvReady() {\r\n    cv['onRuntimeInitialized']=()=>{\r\n      let video = document.getElementById(\"cam_input\"); // video is the id of video tag\r\n      navigator.mediaDevices.getUserMedia({ video: true, audio: false })\r\n      .then(function(stream) {\r\n          video.srcObject = stream;\r\n          video.play();\r\n      })\r\n      .catch(function(err) {\r\n          console.log(\"An error occurred! \" + err);\r\n      });\r\n      let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\r\n      let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\r\n      let gray = new cv.Mat();\r\n      let cap = new cv.VideoCapture(video);\r\n      let faces = new cv.RectVector();\r\n      let classifier = new cv.CascadeClassifier();\r\n      let utils = new Utils('errorMessage');\r\n      let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\r\n      utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n      classifier.load(faceCascadeFile); // in the callback, load the cascade from file\r\n  });\r\n      const FPS = 40;\r\n      function processVideo() {\r\n            let canvas = document.getElementById('canvas_output');\r\n          let ctx = canvas.getContext('2d');\r\n              let begin = Date.now();\r\n          cap.read(src);\r\n          src.copyTo(dst);\r\n          cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\r\n          try{\r\n              classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\r\n              console.log(faces.size());\r\n          }catch(err){\r\n              console.log(err);\r\n          }\r\n          for (let i = 0; i < faces.size(); ++i) {\r\n              let face = faces.get(i);\r\n              let point1 = new cv.Point(face.x, face.y);\r\n              let point2 = new cv.Point(face.x + face.width, face.y + face.height);\r\n              cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\r\n              //ctx.beginPath();\r\n              //ctx.moveTo(face.x, face.y);\r\n              //ctx.lineTo(face.x + face.width, face.y + face.height);\r\n              //ctx.stroke();\r\n              //ctx.lineWidth = 10;\r\n                //base_image = new Image();\r\n              //base_image.src = 'emojis/happy.png';\r\n              //base_image.onload = function(){\r\n                  //console.log(\"here\");\r\n              //}\r\n          }\r\n          cv.imshow(\"canvas_output\", dst);\r\n          // schedule next one.\r\n          let delay = 1000/FPS - (Date.now() - begin);\r\n          setTimeout(processVideo, delay);\r\n  }\r\n  // schedule first one.\r\n  setTimeout(processVideo, 0);\r\n    };\r\n  } */\n\n\n}\n\nexport default Video;","map":{"version":3,"sources":["C:/Users/hurle/School/Spring 2022/AIM/emo7ion3/emo7ion/App/src/pages/video.js"],"names":["React","Video","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AAEA;;;;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAChCC,EAAAA,MAAM,GAAE;AACN,wBACA;AAAA,8BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAO,QAAA,EAAE,EAAC,WAAV;AAAsB,QAAA,MAAM,EAAC,KAA7B;AAAmC,QAAA,KAAK,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAQ,QAAA,EAAE,EAAC,eAAX;AAA2B,QAAA,MAAM,EAAC,KAAlC;AAAwC,QAAA,KAAK,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADA;AASD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAzEoC;;AAkFpC,eAAeF,KAAf","sourcesContent":["import React from 'react';\r\n\r\n//var cv = require('./video_files/opencv.js')\r\n//var Utils = require('./video_files/opencv.js')\r\n\r\n//var myHTML = require('../../public/open_faces.html');\r\n\r\nclass Video extends React.Component {\r\n    render(){\r\n      return(\r\n      <>\r\n\r\n        <h1>Video</h1>\r\n        <video id=\"cam_input\" height=\"240\" width=\"320\"></video>\r\n        <canvas id=\"canvas_output\" height=\"240\" width=\"320\"></canvas>\r\n\r\n      </>\r\n      );\r\n    }\r\n    /*\r\n    openCvReady() {\r\n      cv['onRuntimeInitialized']=()=>{\r\n        let video = document.getElementById(\"cam_input\"); // video is the id of video tag\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: false })\r\n        .then(function(stream) {\r\n            video.srcObject = stream;\r\n            video.play();\r\n        })\r\n        .catch(function(err) {\r\n            console.log(\"An error occurred! \" + err);\r\n        });\r\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\r\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\r\n        let gray = new cv.Mat();\r\n        let cap = new cv.VideoCapture(video);\r\n        let faces = new cv.RectVector();\r\n        let classifier = new cv.CascadeClassifier();\r\n        let utils = new Utils('errorMessage');\r\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\r\n        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n        classifier.load(faceCascadeFile); // in the callback, load the cascade from file\r\n    });\r\n        const FPS = 40;\r\n        function processVideo() {\r\n\r\n            let canvas = document.getElementById('canvas_output');\r\n            let ctx = canvas.getContext('2d');\r\n\r\n\r\n            let begin = Date.now();\r\n            cap.read(src);\r\n            src.copyTo(dst);\r\n            cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\r\n            try{\r\n                classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\r\n                console.log(faces.size());\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            for (let i = 0; i < faces.size(); ++i) {\r\n                let face = faces.get(i);\r\n                let point1 = new cv.Point(face.x, face.y);\r\n                let point2 = new cv.Point(face.x + face.width, face.y + face.height);\r\n                cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\r\n                //ctx.beginPath();\r\n                //ctx.moveTo(face.x, face.y);\r\n                //ctx.lineTo(face.x + face.width, face.y + face.height);\r\n                //ctx.stroke();\r\n                //ctx.lineWidth = 10;\r\n\r\n                //base_image = new Image();\r\n                //base_image.src = 'emojis/happy.png';\r\n                //base_image.onload = function(){\r\n\r\n                  //console.log(\"here\");\r\n                //}\r\n            }\r\n            cv.imshow(\"canvas_output\", dst);\r\n            // schedule next one.\r\n            let delay = 1000/FPS - (Date.now() - begin);\r\n            setTimeout(processVideo, delay);\r\n    }\r\n    // schedule first one.\r\n    setTimeout(processVideo, 0);\r\n      };\r\n    } */\r\n\r\n}\r\n\r\nexport default Video\r\n"]},"metadata":{},"sourceType":"module"}