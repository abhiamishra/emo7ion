{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractFaces, extractFaceTensors } from '../dom';\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\n  if (getRectForAlignment === void 0) {\n    getRectForAlignment = function (_a) {\n      var alignedRect = _a.alignedRect;\n      return alignedRect;\n    };\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var faceBoxes, faces, _a, _b, results;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          faceBoxes = parentResults.map(function (parentResult) {\n            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;\n          });\n          _a = extractedFaces;\n          if (_a) return [3\n          /*break*/\n          , 5];\n          if (!(input instanceof tf.Tensor)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , extractFaceTensors(input, faceBoxes)];\n\n        case 1:\n          _b = _c.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          return [4\n          /*yield*/\n          , extractFaces(input, faceBoxes)];\n\n        case 3:\n          _b = _c.sent();\n          _c.label = 4;\n\n        case 4:\n          _a = _b;\n          _c.label = 5;\n\n        case 5:\n          faces = _a;\n          return [4\n          /*yield*/\n          , computeResults(faces)];\n\n        case 6:\n          results = _c.sent();\n          faces.forEach(function (f) {\n            return f instanceof tf.Tensor && f.dispose();\n          });\n          return [2\n          /*return*/\n          , results];\n      }\n    });\n  });\n}\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , extractAllFacesAndComputeResults([parentResult], input, function (faces) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , computeResult(faces[0])];\n          });\n        });\n      }, extractedFaces, getRectForAlignment)];\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AAGA,SAASC,YAAT,EAAuBC,kBAAvB,QAA4D,QAA5D;AAEA,SAASC,mBAAT,QAAuD,gCAAvD;AAEA,OAAM,SAAgBC,gCAAhB,CACJC,aADI,EAEJC,KAFI,EAGJC,cAHI,EAIJC,cAJI,EAKJC,mBALI,EAKoH;AAAxH;AAAAA,oCAAyFC,EAAzF,EAAwG;UAAbC;AAAkB;AAAW,KAAxH;AAAwH;;;;;;;;AAElHC,mBAAS,GAAGP,aAAa,CAACQ,GAAd,CAAkB,wBAAY;AAC9C,sCAAmB,CAACC,YAAD,CAAnB,GACIL,mBAAmB,CAACK,YAAD,CADvB,GAEIA,YAAY,CAACC,SAFjB;AAE0B,WAHV,CAAZ;AAKgDL;kBAAA;AAAA;AAAA;gBACpDJ,KAAK,YAAYN,EAAE,CAACgB,SAApB;AAAA;AAAA;AACI;AAAA;AAAA,YAAMd,kBAAkB,CAACI,KAAD,EAAQM,SAAR,CAAxB;;;AAAAK;;;;;;AACA;AAAA;AAAA,YAAMhB,YAAY,CAACK,KAAD,EAAQM,SAAR,CAAlB;;;AAAAK;;;;AAHkEP;;;;AAAlEQ,eAAK,KAAL;AAMU;AAAA;AAAA,YAAMX,cAAc,CAACW,KAAD,CAApB;;;AAAVC,iBAAO,GAAGC,SAAV;AAENF,eAAK,CAACG,OAAN,CAAc,aAAC;AAAI,oBAAC,YAAYrB,EAAE,CAACgB,MAAhB,IAA0BM,CAAC,CAACC,OAAF,EAA1B;AAAqC,WAAxD;AAEA;AAAA;AAAA,YAAOJ,OAAP;;;;AACD;AAED,OAAM,SAAgBK,iCAAhB,CACJV,YADI,EAEJR,KAFI,EAGJmB,aAHI,EAIJjB,cAJI,EAKJC,mBALI,EAKkF;;;;;AAEtF;AAAA;AAAA,QAAOL,gCAAgC,CACrC,CAACU,YAAD,CADqC,EAErCR,KAFqC,EAGrC,UAAMY,KAAN,EAAW;AAAA;AAAA;AAAI;AAAA;AAAA,2BAAa,CAACA,KAAK,CAAC,CAAD,CAAN,CAAb;WAAJ;SAAA;AAA2B,OAHD,EAIrCV,cAJqC,EAKrCC,mBALqC,CAAvC;;;AAOD","names":["tf","extractFaces","extractFaceTensors","isWithFaceLandmarks","extractAllFacesAndComputeResults","parentResults","input","computeResults","extractedFaces","getRectForAlignment","_a","alignedRect","faceBoxes","map","parentResult","detection","Tensor","_b","faces","results","_c","forEach","f","dispose","extractSingleFaceAndComputeResult","computeResult"],"sources":["../../../src/globalApi/extractFacesAndComputeResults.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}