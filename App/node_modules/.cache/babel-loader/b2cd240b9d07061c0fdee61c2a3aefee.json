{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hurle\\\\School\\\\Spring 2022\\\\AIM\\\\emo7ion3\\\\emo7ion\\\\App\\\\src\\\\pages\\\\video.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Video() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"html\", {\n      lang: \"en\",\n      children: [/*#__PURE__*/_jsxDEV(\"head\", {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          charset: \"UTF-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"viewport\",\n          content: \"width=device-width, initial-scale=1.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Opencv JS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n          async: true,\n          src: \"video_files/opencv.js\",\n          onload: \"openCvReady();\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n          src: \"video_files/utils.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"cam_input\",\n          height: \"240\",\n          width: \"320\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"canvas_output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_c = Video;\n\nfunction openCvReady() {\n  cv['onRuntimeInitialized'] = () => {\n    let video = document.getElementById(\"cam_input\"); // video is the id of video tag\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: false\n    }).then(function (stream) {\n      video.srcObject = stream;\n      video.play();\n    }).catch(function (err) {\n      console.log(\"An error occurred! \" + err);\n    });\n    let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    let gray = new cv.Mat();\n    let cap = new cv.VideoCapture(cam_input);\n    let faces = new cv.RectVector();\n    let classifier = new cv.CascadeClassifier();\n    let utils = new Utils('errorMessage');\n    let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n\n    utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n      classifier.load(faceCascadeFile); // in the callback, load the cascade from file\n    });\n    const FPS = 40;\n\n    function processVideo() {\n      let canvas = document.getElementById('canvas_output');\n      let ctx = canvas.getContext('2d');\n      let begin = Date.now();\n      cap.read(src);\n      src.copyTo(dst);\n      cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n\n      try {\n        classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n        console.log(faces.size());\n      } catch (err) {\n        console.log(err);\n      }\n\n      for (let i = 0; i < faces.size(); ++i) {\n        let face = faces.get(i);\n        let point1 = new cv.Point(face.x, face.y);\n        let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n        cv.rectangle(dst, point1, point2, [255, 0, 0, 255]); //ctx.beginPath();\n        //ctx.moveTo(face.x, face.y);\n        //ctx.lineTo(face.x + face.width, face.y + face.height);\n        //ctx.stroke();\n        //ctx.lineWidth = 10;\n        //base_image = new Image();\n        //base_image.src = 'emojis/happy.png';\n        //base_image.onload = function(){\n        //console.log(\"here\");\n        //}\n      }\n\n      cv.imshow(\"canvas_output\", dst); // schedule next one.\n\n      let delay = 1000 / FPS - (Date.now() - begin);\n      setTimeout(processVideo, delay);\n    } // schedule first one.\n\n\n    setTimeout(processVideo, 0);\n  };\n}\n\nexport default Video;\n\nvar _c;\n\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"sources":["C:/Users/hurle/School/Spring 2022/AIM/emo7ion3/emo7ion/App/src/pages/video.js"],"names":["React","Video","openCvReady","cv","video","document","getElementById","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","console","log","src","Mat","height","width","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","cam_input","faces","RectVector","classifier","CascadeClassifier","utils","Utils","faceCascadeFile","createFileFromUrl","load","FPS","processVideo","canvas","ctx","getContext","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","size","i","face","get","point1","Point","x","y","point2","rectangle","imshow","delay","setTimeout"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nfunction Video(){\r\n    return(\r\n      <>\r\n        <h1>Video</h1>\r\n        <html lang=\"en\">\r\n          <head>\r\n              <meta charset=\"UTF-8\"/>\r\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n              <title>Opencv JS</title>\r\n              <script async src=\"video_files/opencv.js\" onload=\"openCvReady();\"></script>\r\n              <script src=\"video_files/utils.js\"></script>\r\n          </head>\r\n          <body>\r\n              <video id=\"cam_input\" height=\"240\" width=\"320\"></video>\r\n              <canvas id=\"canvas_output\"></canvas>\r\n          </body>\r\n        </html>\r\n</>\r\n);\r\n}\r\n\r\nfunction openCvReady() {\r\n  cv['onRuntimeInitialized']=()=>{\r\n    let video = document.getElementById(\"cam_input\"); // video is the id of video tag\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: false })\r\n    .then(function(stream) {\r\n        video.srcObject = stream;\r\n        video.play();\r\n    })\r\n    .catch(function(err) {\r\n        console.log(\"An error occurred! \" + err);\r\n    });\r\n    let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\r\n    let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\r\n    let gray = new cv.Mat();\r\n    let cap = new cv.VideoCapture(cam_input);\r\n    let faces = new cv.RectVector();\r\n    let classifier = new cv.CascadeClassifier();\r\n    let utils = new Utils('errorMessage');\r\n    let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\r\n    utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n    classifier.load(faceCascadeFile); // in the callback, load the cascade from file\r\n});\r\n    const FPS = 40;\r\n    function processVideo() {\r\n\r\n        let canvas = document.getElementById('canvas_output');\r\n        let ctx = canvas.getContext('2d');\r\n\r\n\r\n        let begin = Date.now();\r\n        cap.read(src);\r\n        src.copyTo(dst);\r\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\r\n        try{\r\n            classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\r\n            console.log(faces.size());\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n            let face = faces.get(i);\r\n            let point1 = new cv.Point(face.x, face.y);\r\n            let point2 = new cv.Point(face.x + face.width, face.y + face.height);\r\n            cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\r\n            //ctx.beginPath();\r\n            //ctx.moveTo(face.x, face.y);\r\n            //ctx.lineTo(face.x + face.width, face.y + face.height);\r\n            //ctx.stroke();\r\n            //ctx.lineWidth = 10;\r\n\r\n            //base_image = new Image();\r\n            //base_image.src = 'emojis/happy.png';\r\n            //base_image.onload = function(){\r\n\r\n              //console.log(\"here\");\r\n            //}\r\n        }\r\n        cv.imshow(\"canvas_output\", dst);\r\n        // schedule next one.\r\n        let delay = 1000/FPS - (Date.now() - begin);\r\n        setTimeout(processVideo, delay);\r\n}\r\n  // schedule first one.\r\n  setTimeout(processVideo, 0);\r\n};\r\n}\r\nexport default Video\r\n"]},"metadata":{},"sourceType":"module"}