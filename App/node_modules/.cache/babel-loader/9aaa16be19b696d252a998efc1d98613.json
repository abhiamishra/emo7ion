{"ast":null,"code":"import { FaceMatch } from '../classes/FaceMatch';\nimport { LabeledFaceDescriptors } from '../classes/LabeledFaceDescriptors';\nimport { euclideanDistance } from '../euclideanDistance';\n\nvar FaceMatcher =\n/** @class */\nfunction () {\n  function FaceMatcher(inputs, distanceThreshold) {\n    if (distanceThreshold === void 0) {\n      distanceThreshold = 0.6;\n    }\n\n    this._distanceThreshold = distanceThreshold;\n    var inputArray = Array.isArray(inputs) ? inputs : [inputs];\n\n    if (!inputArray.length) {\n      throw new Error(\"FaceRecognizer.constructor - expected atleast one input\");\n    }\n\n    var count = 1;\n\n    var createUniqueLabel = function () {\n      return \"person \" + count++;\n    };\n\n    this._labeledDescriptors = inputArray.map(function (desc) {\n      if (desc instanceof LabeledFaceDescriptors) {\n        return desc;\n      }\n\n      if (desc instanceof Float32Array) {\n        return new LabeledFaceDescriptors(createUniqueLabel(), [desc]);\n      }\n\n      if (desc.descriptor && desc.descriptor instanceof Float32Array) {\n        return new LabeledFaceDescriptors(createUniqueLabel(), [desc.descriptor]);\n      }\n\n      throw new Error(\"FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>\");\n    });\n  }\n\n  Object.defineProperty(FaceMatcher.prototype, \"labeledDescriptors\", {\n    get: function () {\n      return this._labeledDescriptors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FaceMatcher.prototype, \"distanceThreshold\", {\n    get: function () {\n      return this._distanceThreshold;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FaceMatcher.prototype.computeMeanDistance = function (queryDescriptor, descriptors) {\n    return descriptors.map(function (d) {\n      return euclideanDistance(d, queryDescriptor);\n    }).reduce(function (d1, d2) {\n      return d1 + d2;\n    }, 0) / (descriptors.length || 1);\n  };\n\n  FaceMatcher.prototype.matchDescriptor = function (queryDescriptor) {\n    var _this = this;\n\n    return this.labeledDescriptors.map(function (_a) {\n      var descriptors = _a.descriptors,\n          label = _a.label;\n      return new FaceMatch(label, _this.computeMeanDistance(queryDescriptor, descriptors));\n    }).reduce(function (best, curr) {\n      return best.distance < curr.distance ? best : curr;\n    });\n  };\n\n  FaceMatcher.prototype.findBestMatch = function (queryDescriptor) {\n    var bestMatch = this.matchDescriptor(queryDescriptor);\n    return bestMatch.distance < this.distanceThreshold ? bestMatch : new FaceMatch('unknown', bestMatch.distance);\n  };\n\n  FaceMatcher.prototype.toJSON = function () {\n    return {\n      distanceThreshold: this.distanceThreshold,\n      labeledDescriptors: this.labeledDescriptors.map(function (ld) {\n        return ld.toJSON();\n      })\n    };\n  };\n\n  FaceMatcher.fromJSON = function (json) {\n    var labeledDescriptors = json.labeledDescriptors.map(function (ld) {\n      return LabeledFaceDescriptors.fromJSON(ld);\n    });\n    return new FaceMatcher(labeledDescriptors, json.distanceThreshold);\n  };\n\n  return FaceMatcher;\n}();\n\nexport { FaceMatcher };","map":{"version":3,"mappings":"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","names":["FaceMatch","LabeledFaceDescriptors","euclideanDistance","inputs","distanceThreshold","_distanceThreshold","inputArray","Array","isArray","length","Error","count","createUniqueLabel","_labeledDescriptors","map","desc","Float32Array","descriptor","Object","FaceMatcher","queryDescriptor","descriptors","d","reduce","d1","d2","labeledDescriptors","_a","label","_this","computeMeanDistance","best","curr","distance","bestMatch","matchDescriptor","ld","toJSON","json","fromJSON"],"sources":["../../../src/globalApi/FaceMatcher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}