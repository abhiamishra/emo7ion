{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor2D } from '../utils';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractScaleLayerParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\n    var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n\n  function extractConvLayerParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\n    var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\n    var scale = extractScaleLayerParams(prefix);\n    return {\n      conv: {\n        filters: filters,\n        bias: bias\n      },\n      scale: scale\n    };\n  }\n\n  function extractResidualLayerParams(prefix) {\n    return {\n      conv1: extractConvLayerParams(prefix + \"/conv1\"),\n      conv2: extractConvLayerParams(prefix + \"/conv2\")\n    };\n  }\n\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractConvLayerParams = _a.extractConvLayerParams,\n      extractResidualLayerParams = _a.extractResidualLayerParams;\n\n  var conv32_down = extractConvLayerParams('conv32_down');\n  var conv32_1 = extractResidualLayerParams('conv32_1');\n  var conv32_2 = extractResidualLayerParams('conv32_2');\n  var conv32_3 = extractResidualLayerParams('conv32_3');\n  var conv64_down = extractResidualLayerParams('conv64_down');\n  var conv64_1 = extractResidualLayerParams('conv64_1');\n  var conv64_2 = extractResidualLayerParams('conv64_2');\n  var conv64_3 = extractResidualLayerParams('conv64_3');\n  var conv128_down = extractResidualLayerParams('conv128_down');\n  var conv128_1 = extractResidualLayerParams('conv128_1');\n  var conv128_2 = extractResidualLayerParams('conv128_2');\n  var conv256_down = extractResidualLayerParams('conv256_down');\n  var conv256_1 = extractResidualLayerParams('conv256_1');\n  var conv256_2 = extractResidualLayerParams('conv256_2');\n  var conv256_down_out = extractResidualLayerParams('conv256_down_out');\n  var fc = weightMap['fc'];\n  paramMappings.push({\n    originalPath: 'fc',\n    paramPath: 'fc'\n  });\n\n  if (!isTensor2D(fc)) {\n    throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\n  }\n\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["disposeUnusedWeightTensors","extractWeightEntryFactory","isTensor2D","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractScaleLayerParams","prefix","weights","biases","extractConvLayerParams","filters","bias","scale","conv","extractResidualLayerParams","conv1","conv2","extractParamsFromWeigthMap","conv32_down","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","fc","push","originalPath","paramPath","Error","params"],"sources":["../../../src/faceRecognitionNet/extractParamsFromWeigthMap.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}