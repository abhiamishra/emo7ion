{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { Point } from '../classes';\nimport { Dimensions } from '../classes/Dimensions';\nexport function isTensor(tensor, dim) {\n  return tensor instanceof tf.Tensor && tensor.shape.length === dim;\n}\nexport function isTensor1D(tensor) {\n  return isTensor(tensor, 1);\n}\nexport function isTensor2D(tensor) {\n  return isTensor(tensor, 2);\n}\nexport function isTensor3D(tensor) {\n  return isTensor(tensor, 3);\n}\nexport function isTensor4D(tensor) {\n  return isTensor(tensor, 4);\n}\nexport function isFloat(num) {\n  return num % 1 !== 0;\n}\nexport function isEven(num) {\n  return num % 2 === 0;\n}\nexport function round(num, prec) {\n  if (prec === void 0) {\n    prec = 2;\n  }\n\n  var f = Math.pow(10, prec);\n  return Math.floor(num * f) / f;\n}\nexport function isDimensions(obj) {\n  return obj && obj.width && obj.height;\n}\nexport function computeReshapedDimensions(_a, inputSize) {\n  var width = _a.width,\n      height = _a.height;\n  var scale = inputSize / Math.max(height, width);\n  return new Dimensions(Math.round(width * scale), Math.round(height * scale));\n}\nexport function getCenterPoint(pts) {\n  return pts.reduce(function (sum, pt) {\n    return sum.add(pt);\n  }, new Point(0, 0)).div(new Point(pts.length, pts.length));\n}\nexport function range(num, start, step) {\n  return Array(num).fill(0).map(function (_, i) {\n    return start + i * step;\n  });\n}\nexport function isValidNumber(num) {\n  return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;\n}\nexport function isValidProbablitiy(num) {\n  return isValidNumber(num) && 0 <= num && num <= 1.0;\n}","map":{"version":3,"mappings":"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","names":["tf","Point","Dimensions","isTensor","tensor","dim","Tensor","shape","length","isTensor1D","isTensor2D","isTensor3D","isTensor4D","isFloat","num","isEven","round","prec","f","Math","pow","floor","isDimensions","obj","width","height","computeReshapedDimensions","_a","inputSize","scale","max","getCenterPoint","pts","reduce","sum","pt","add","div","range","start","step","Array","fill","map","_","i","isValidNumber","Infinity","isNaN","isValidProbablitiy"],"sources":["../../../src/utils/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}