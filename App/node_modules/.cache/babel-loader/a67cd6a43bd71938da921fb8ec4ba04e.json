{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Rect } from '../classes';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { mobileNetV1 } from './mobileNetV1';\nimport { nonMaxSuppression } from './nonMaxSuppression';\nimport { outputLayer } from './outputLayer';\nimport { predictionLayer } from './predictionLayer';\nimport { SsdMobilenetv1Options } from './SsdMobilenetv1Options';\n\nvar SsdMobilenetv1 =\n/** @class */\nfunction (_super) {\n  __extends(SsdMobilenetv1, _super);\n\n  function SsdMobilenetv1() {\n    return _super.call(this, 'SsdMobilenetv1') || this;\n  }\n\n  SsdMobilenetv1.prototype.forwardInput = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('SsdMobilenetv1 - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(512, false).toFloat();\n      var x = tf.sub(tf.mul(batchTensor, tf.scalar(0.007843137718737125)), tf.scalar(1));\n      var features = mobileNetV1(x, params.mobilenetv1);\n\n      var _a = predictionLayer(features.out, features.conv11, params.prediction_layer),\n          boxPredictions = _a.boxPredictions,\n          classPredictions = _a.classPredictions;\n\n      return outputLayer(boxPredictions, classPredictions, params.output_layer);\n    });\n  };\n\n  SsdMobilenetv1.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  SsdMobilenetv1.prototype.locateFaces = function (input, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, maxResults, minConfidence, netInput, _b, _boxes, _scores, boxes, scores, i, scoresData, _c, _d, iouThreshold, indices, reshapedDims, inputSize, padX, padY, boxesData, results;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _a = new SsdMobilenetv1Options(options), maxResults = _a.maxResults, minConfidence = _a.minConfidence;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _e.sent();\n            _b = this.forwardInput(netInput), _boxes = _b.boxes, _scores = _b.scores;\n            boxes = _boxes[0];\n            scores = _scores[0];\n\n            for (i = 1; i < _boxes.length; i++) {\n              _boxes[i].dispose();\n\n              _scores[i].dispose();\n            }\n\n            _d = (_c = Array).from;\n            return [4\n            /*yield*/\n            , scores.data()];\n\n          case 2:\n            scoresData = _d.apply(_c, [_e.sent()]);\n            iouThreshold = 0.5;\n            indices = nonMaxSuppression(boxes, scoresData, maxResults, iouThreshold, minConfidence);\n            reshapedDims = netInput.getReshapedInputDimensions(0);\n            inputSize = netInput.inputSize;\n            padX = inputSize / reshapedDims.width;\n            padY = inputSize / reshapedDims.height;\n            boxesData = boxes.arraySync();\n            results = indices.map(function (idx) {\n              var _a = [Math.max(0, boxesData[idx][0]), Math.min(1.0, boxesData[idx][2])].map(function (val) {\n                return val * padY;\n              }),\n                  top = _a[0],\n                  bottom = _a[1];\n\n              var _b = [Math.max(0, boxesData[idx][1]), Math.min(1.0, boxesData[idx][3])].map(function (val) {\n                return val * padX;\n              }),\n                  left = _b[0],\n                  right = _b[1];\n\n              return new FaceDetection(scoresData[idx], new Rect(left, top, right - left, bottom - top), {\n                height: netInput.getInputHeight(0),\n                width: netInput.getInputWidth(0)\n              });\n            });\n            boxes.dispose();\n            scores.dispose();\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n\n  SsdMobilenetv1.prototype.getDefaultModelName = function () {\n    return 'ssd_mobilenetv1_model';\n  };\n\n  SsdMobilenetv1.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n\n  SsdMobilenetv1.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  return SsdMobilenetv1;\n}(NeuralNetwork);\n\nexport { SsdMobilenetv1 };","map":{"version":3,"mappings":"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","names":["tf","Rect","FaceDetection","toNetInput","NeuralNetwork","extractParams","extractParamsFromWeigthMap","mobileNetV1","nonMaxSuppression","outputLayer","predictionLayer","SsdMobilenetv1Options","__extends","_super","SsdMobilenetv1","input","params","Error","tidy","batchTensor","toBatchTensor","toFloat","x","sub","mul","scalar","features","mobilenetv1","boxPredictions","classPredictions","output_layer","_a","forwardInput","_b","options","maxResults","minConfidence","netInput","_e","_boxes","_scores","boxes","scores","i","length","dispose","_d","from","data","scoresData","iouThreshold","indices","reshapedDims","getReshapedInputDimensions","inputSize","padX","width","padY","height","boxesData","arraySync","results","map","top","bottom","left","right","idx","getInputHeight","getInputWidth","weightMap","weights"],"sources":["../../../src/ssdMobilenetv1/SsdMobilenetv1.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}