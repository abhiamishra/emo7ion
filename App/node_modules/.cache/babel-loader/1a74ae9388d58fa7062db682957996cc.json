{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { NetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { seperateWeightMaps } from './util';\n\nvar FaceProcessor =\n/** @class */\nfunction (_super) {\n  __extends(FaceProcessor, _super);\n\n  function FaceProcessor(_name, faceFeatureExtractor) {\n    var _this = _super.call(this, _name) || this;\n\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n\n  Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FaceProcessor.prototype.runNet = function (input) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\n    });\n  };\n\n  FaceProcessor.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n\n  FaceProcessor.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n        params = _a.params,\n        paramMappings = _a.paramMappings;\n\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n\n  FaceProcessor.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\n  };\n\n  FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n        featureExtractorMap = _a.featureExtractorMap,\n        classifierMap = _a.classifierMap;\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n\n  FaceProcessor.prototype.extractParams = function (weights) {\n    var cIn = this.getClassifierChannelsIn();\n    var cOut = this.getClassifierChannelsOut();\n    var classifierWeightSize = cOut * cIn + cOut;\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n\n  return FaceProcessor;\n}(NeuralNetwork);\n\nexport { FaceProcessor };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AAEA,SAASC,mBAAT,QAAoC,+BAApC;AACA,SAASC,QAAT,QAAyB,QAAzB;AAMA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAEA,SAASC,kBAAT,QAAmC,QAAnC;;AAEA;AAAA;AAAA;AAGUC;;AAIR,yBAAYC,KAAZ,EAA2BC,oBAA3B,EAAwF;AAAxF,gBACEC,kBAAMF,KAAN,KAAY,IADd;;AAEEG,SAAI,CAACC,qBAAL,GAA6BH,oBAA7B;;AACD;;AAEDI,wBAAWC,uBAAX,EAAW,sBAAX,EAA+B;SAA/B;AACE,aAAO,KAAKF,qBAAZ;AACD,KAF8B;oBAAA;;AAAA,GAA/B;;AAQOE,mCAAP,UAAcC,KAAd,EAA2C;AAA3C;;AAEU;;AAER,QAAI,CAACC,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAa,KAAKT,KAAL,GAAU,gCAAvB,CAAN;AACD;;AAED,WAAOR,EAAE,CAACkB,IAAH,CAAQ;AACb,UAAMC,kBAAkB,GAAGJ,KAAK,YAAYb,QAAjB,GACvBS,KAAI,CAACF,oBAAL,CAA0BW,YAA1B,CAAuCL,KAAvC,CADuB,GAEvBA,KAFJ;AAGA,aAAOd,mBAAmB,CAACkB,kBAAkB,CAACE,IAAnB,CAAwBF,kBAAkB,CAACG,KAAnB,CAAyB,CAAzB,CAAxB,EAAqD,CAAC,CAAtD,CAAD,EAA2DN,MAAM,CAACO,EAAlE,CAA1B;AACD,KALM,CAAP;AAMD,GAdM;;AAgBAT,oCAAP,UAAeU,gBAAf,EAA+C;AAAhC;AAAAA;AAAgC;;AAC7C,SAAKf,oBAAL,CAA0BgB,OAA1B,CAAkCD,gBAAlC;;AACAd,qBAAMe,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAcF,gBAAd;AACD,GAHM;;AAKAV,iDAAP,UAA4Ba,OAA5B,EAAiD;AACzC;AAAA,QAAEX,kBAAF;AAAA,QAAUY,gCAAV;;AACN,SAAKC,OAAL,GAAeb,MAAf;AACA,SAAKc,cAAL,GAAsBF,aAAtB;AACD,GAJM;;AAMAd,oDAAP,UAA+Ba,OAA/B,EAAoD;AAClD,WAAOvB,aAAa,CAACuB,OAAD,EAAU,KAAKI,uBAAL,EAAV,EAA0C,KAAKC,wBAAL,EAA1C,CAApB;AACD,GAFM;;AAIGlB,uDAAV,UAAqCmB,SAArC,EAAiE;AAEzD;AAAA,QAAEC,4CAAF;AAAA,QAAuBC,gCAAvB;;AAEN,SAAK1B,oBAAL,CAA0B2B,iBAA1B,CAA4CF,mBAA5C;AAEA,WAAO7B,0BAA0B,CAAC8B,aAAD,CAAjC;AACD,GAPS;;AASArB,0CAAV,UAAwBa,OAAxB,EAA6C;AAE3C,QAAMU,GAAG,GAAG,KAAKN,uBAAL,EAAZ;AACA,QAAMO,IAAI,GAAG,KAAKN,wBAAL,EAAb;AACA,QAAMO,oBAAoB,GAAID,IAAI,GAAGD,GAAR,GAAgBC,IAA7C;AAEA,QAAME,uBAAuB,GAAGb,OAAO,CAACc,KAAR,CAAc,CAAd,EAAiBd,OAAO,CAACe,MAAR,GAAiBH,oBAAlC,CAAhC;AACA,QAAMI,iBAAiB,GAAGhB,OAAO,CAACc,KAAR,CAAcd,OAAO,CAACe,MAAR,GAAiBH,oBAA/B,CAA1B;AAEA,SAAK9B,oBAAL,CAA0BmC,cAA1B,CAAyCJ,uBAAzC;AACA,WAAO,KAAKK,uBAAL,CAA6BF,iBAA7B,CAAP;AACD,GAXS;;AAYZ;AAxEA,EAGUxC,aAHV","names":["tf","fullyConnectedLayer","NetInput","NeuralNetwork","extractParams","extractParamsFromWeigthMap","seperateWeightMaps","__extends","_name","faceFeatureExtractor","_super","_this","_faceFeatureExtractor","Object","FaceProcessor","input","params","Error","tidy","bottleneckFeatures","forwardInput","as2D","shape","fc","throwOnRedispose","dispose","call","weights","paramMappings","_params","_paramMappings","getClassifierChannelsIn","getClassifierChannelsOut","weightMap","featureExtractorMap","classifierMap","loadFromWeightMap","cIn","cOut","classifierWeightSize","featureExtractorWeights","slice","length","classifierWeights","extractWeights","extractClassifierParams"],"sources":["../../../src/faceProcessor/FaceProcessor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}