{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractConvParamsFactory } from '../common';\nimport { extractSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\nimport { extractWeightsFactory } from '../common/extractWeightsFactory';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n\n  function extractBatchNormParams(size, mappedPrefix) {\n    var sub = tf.tensor1d(extractWeights(size));\n    var truediv = tf.tensor1d(extractWeights(size));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/sub\"\n    }, {\n      paramPath: mappedPrefix + \"/truediv\"\n    });\n    return {\n      sub: sub,\n      truediv: truediv\n    };\n  }\n\n  function extractConvWithBatchNormParams(channelsIn, channelsOut, mappedPrefix) {\n    var conv = extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + \"/conv\");\n    var bn = extractBatchNormParams(channelsOut, mappedPrefix + \"/bn\");\n    return {\n      conv: conv,\n      bn: bn\n    };\n  }\n\n  var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\n  return {\n    extractConvParams: extractConvParams,\n    extractConvWithBatchNormParams: extractConvWithBatchNormParams,\n    extractSeparableConvParams: extractSeparableConvParams\n  };\n}\n\nexport function extractParams(weights, config, boxEncodingSize, filterSizes) {\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var paramMappings = [];\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractConvParams = _b.extractConvParams,\n      extractConvWithBatchNormParams = _b.extractConvWithBatchNormParams,\n      extractSeparableConvParams = _b.extractSeparableConvParams;\n\n  var params;\n\n  if (config.withSeparableConvs) {\n    var s0 = filterSizes[0],\n        s1 = filterSizes[1],\n        s2 = filterSizes[2],\n        s3 = filterSizes[3],\n        s4 = filterSizes[4],\n        s5 = filterSizes[5],\n        s6 = filterSizes[6],\n        s7 = filterSizes[7],\n        s8 = filterSizes[8];\n    var conv0 = config.isFirstLayerConv2d ? extractConvParams(s0, s1, 3, 'conv0') : extractSeparableConvParams(s0, s1, 'conv0');\n    var conv1 = extractSeparableConvParams(s1, s2, 'conv1');\n    var conv2 = extractSeparableConvParams(s2, s3, 'conv2');\n    var conv3 = extractSeparableConvParams(s3, s4, 'conv3');\n    var conv4 = extractSeparableConvParams(s4, s5, 'conv4');\n    var conv5 = extractSeparableConvParams(s5, s6, 'conv5');\n    var conv6 = s7 ? extractSeparableConvParams(s6, s7, 'conv6') : undefined;\n    var conv7 = s8 ? extractSeparableConvParams(s7, s8, 'conv7') : undefined;\n    var conv8 = extractConvParams(s8 || s7 || s6, 5 * boxEncodingSize, 1, 'conv8');\n    params = {\n      conv0: conv0,\n      conv1: conv1,\n      conv2: conv2,\n      conv3: conv3,\n      conv4: conv4,\n      conv5: conv5,\n      conv6: conv6,\n      conv7: conv7,\n      conv8: conv8\n    };\n  } else {\n    var s0 = filterSizes[0],\n        s1 = filterSizes[1],\n        s2 = filterSizes[2],\n        s3 = filterSizes[3],\n        s4 = filterSizes[4],\n        s5 = filterSizes[5],\n        s6 = filterSizes[6],\n        s7 = filterSizes[7],\n        s8 = filterSizes[8];\n    var conv0 = extractConvWithBatchNormParams(s0, s1, 'conv0');\n    var conv1 = extractConvWithBatchNormParams(s1, s2, 'conv1');\n    var conv2 = extractConvWithBatchNormParams(s2, s3, 'conv2');\n    var conv3 = extractConvWithBatchNormParams(s3, s4, 'conv3');\n    var conv4 = extractConvWithBatchNormParams(s4, s5, 'conv4');\n    var conv5 = extractConvWithBatchNormParams(s5, s6, 'conv5');\n    var conv6 = extractConvWithBatchNormParams(s6, s7, 'conv6');\n    var conv7 = extractConvWithBatchNormParams(s7, s8, 'conv7');\n    var conv8 = extractConvParams(s8, 5 * boxEncodingSize, 1, 'conv8');\n    params = {\n      conv0: conv0,\n      conv1: conv1,\n      conv2: conv2,\n      conv3: conv3,\n      conv4: conv4,\n      conv5: conv5,\n      conv6: conv6,\n      conv7: conv7,\n      conv8: conv8\n    };\n  }\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["tf","extractConvParamsFactory","extractSeparableConvParamsFactory","extractWeightsFactory","extractorsFactory","extractWeights","paramMappings","extractConvParams","extractBatchNormParams","size","mappedPrefix","sub","tensor1d","truediv","push","paramPath","extractConvWithBatchNormParams","channelsIn","channelsOut","conv","bn","extractSeparableConvParams","extractParams","weights","config","boxEncodingSize","filterSizes","getRemainingWeights","params","withSeparableConvs","s1","s2","s3","s4","s5","s6","s7","s8","conv0","isFirstLayerConv2d","s0","conv1","conv2","conv3","conv4","conv5","conv6","undefined","conv7","conv8","length","Error"],"sources":["../../../src/tinyYolov2/extractParams.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}