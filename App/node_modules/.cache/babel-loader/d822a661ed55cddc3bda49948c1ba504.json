{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hurle\\\\School\\\\Spring 2022\\\\AIM\\\\emo7ion3\\\\emo7ion\\\\App\\\\src\\\\pages\\\\video.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar cv = require('./video_files/opencv.js');\n\nvar Utils = require('./video_files/opencv.js');\n\nclass Video extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"script\", {\n        async: true,\n        src: \"./video_files/opencv.js\",\n        onload: \"openCvReady();\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"./video_files/utils.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"cam_input\",\n        height: \"240\",\n        width: \"320\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas_output\",\n        height: \"240\",\n        width: \"320\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  openCvReady() {\n    cv['onRuntimeInitialized'] = () => {\n      let video = document.getElementById(\"cam_input\"); // video is the id of video tag\n\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: false\n      }).then(function (stream) {\n        video.srcObject = stream;\n        video.play();\n      }).catch(function (err) {\n        console.log(\"An error occurred! \" + err);\n      });\n      let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n      let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n      let gray = new cv.Mat();\n      let cap = new cv.VideoCapture(video);\n      let faces = new cv.RectVector();\n      let classifier = new cv.CascadeClassifier();\n      let utils = new Utils('errorMessage');\n      let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n\n      utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n        classifier.load(faceCascadeFile); // in the callback, load the cascade from file\n      });\n      const FPS = 40;\n\n      function processVideo() {\n        let canvas = document.getElementById('canvas_output');\n        let ctx = canvas.getContext('2d');\n        let begin = Date.now();\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n\n        try {\n          classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n          console.log(faces.size());\n        } catch (err) {\n          console.log(err);\n        }\n\n        for (let i = 0; i < faces.size(); ++i) {\n          let face = faces.get(i);\n          let point1 = new cv.Point(face.x, face.y);\n          let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n          cv.rectangle(dst, point1, point2, [255, 0, 0, 255]); //ctx.beginPath();\n          //ctx.moveTo(face.x, face.y);\n          //ctx.lineTo(face.x + face.width, face.y + face.height);\n          //ctx.stroke();\n          //ctx.lineWidth = 10;\n          //base_image = new Image();\n          //base_image.src = 'emojis/happy.png';\n          //base_image.onload = function(){\n          //console.log(\"here\");\n          //}\n        }\n\n        cv.imshow(\"canvas_output\", dst); // schedule next one.\n\n        let delay = 1000 / FPS - (Date.now() - begin);\n        setTimeout(processVideo, delay);\n      } // schedule first one.\n\n\n      setTimeout(processVideo, 0);\n    };\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["C:/Users/hurle/School/Spring 2022/AIM/emo7ion3/emo7ion/App/src/pages/video.js"],"names":["React","cv","require","Utils","Video","Component","render","openCvReady","video","document","getElementById","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","console","log","src","Mat","height","width","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","faces","RectVector","classifier","CascadeClassifier","utils","faceCascadeFile","createFileFromUrl","load","FPS","processVideo","canvas","ctx","getContext","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","size","i","face","get","point1","Point","x","y","point2","rectangle","imshow","delay","setTimeout"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nvar cv = require('./video_files/opencv.js')\r\nvar Utils = require('./video_files/opencv.js')\r\n\r\n\r\nclass Video extends React.Component {\r\n    render(){\r\n      return(\r\n      <>\r\n        <script async src=\"./video_files/opencv.js\" onload=\"openCvReady();\"></script>\r\n        <script src=\"./video_files/utils.js\"></script>\r\n        <h1>Video</h1>\r\n        <video id=\"cam_input\" height=\"240\" width=\"320\"></video>\r\n        <canvas id=\"canvas_output\" height=\"240\" width=\"320\"></canvas>\r\n\r\n      </>\r\n      );\r\n    }\r\n\r\n    openCvReady() {\r\n      cv['onRuntimeInitialized']=()=>{\r\n        let video = document.getElementById(\"cam_input\"); // video is the id of video tag\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: false })\r\n        .then(function(stream) {\r\n            video.srcObject = stream;\r\n            video.play();\r\n        })\r\n        .catch(function(err) {\r\n            console.log(\"An error occurred! \" + err);\r\n        });\r\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\r\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\r\n        let gray = new cv.Mat();\r\n        let cap = new cv.VideoCapture(video);\r\n        let faces = new cv.RectVector();\r\n        let classifier = new cv.CascadeClassifier();\r\n        let utils = new Utils('errorMessage');\r\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\r\n        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n        classifier.load(faceCascadeFile); // in the callback, load the cascade from file\r\n    });\r\n        const FPS = 40;\r\n        function processVideo() {\r\n\r\n            let canvas = document.getElementById('canvas_output');\r\n            let ctx = canvas.getContext('2d');\r\n\r\n\r\n            let begin = Date.now();\r\n            cap.read(src);\r\n            src.copyTo(dst);\r\n            cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\r\n            try{\r\n                classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\r\n                console.log(faces.size());\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            for (let i = 0; i < faces.size(); ++i) {\r\n                let face = faces.get(i);\r\n                let point1 = new cv.Point(face.x, face.y);\r\n                let point2 = new cv.Point(face.x + face.width, face.y + face.height);\r\n                cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\r\n                //ctx.beginPath();\r\n                //ctx.moveTo(face.x, face.y);\r\n                //ctx.lineTo(face.x + face.width, face.y + face.height);\r\n                //ctx.stroke();\r\n                //ctx.lineWidth = 10;\r\n\r\n                //base_image = new Image();\r\n                //base_image.src = 'emojis/happy.png';\r\n                //base_image.onload = function(){\r\n\r\n                  //console.log(\"here\");\r\n                //}\r\n            }\r\n            cv.imshow(\"canvas_output\", dst);\r\n            // schedule next one.\r\n            let delay = 1000/FPS - (Date.now() - begin);\r\n            setTimeout(processVideo, delay);\r\n    }\r\n    // schedule first one.\r\n    setTimeout(processVideo, 0);\r\n      };\r\n    }\r\n\r\n}\r\nexport default Video\r\n"]},"metadata":{},"sourceType":"module"}