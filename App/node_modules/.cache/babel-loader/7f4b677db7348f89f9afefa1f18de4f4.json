{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractConvParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/weights\", 4, prefix + \"/filters\");\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractFCParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/weights\", 2);\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      weights: weights,\n      bias: bias\n    };\n  }\n\n  function extractPReluParams(paramPath) {\n    return extractWeightEntry(paramPath, 1);\n  }\n\n  function extractSharedParams(prefix) {\n    var conv1 = extractConvParams(prefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(prefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(prefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(prefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(prefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(prefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams('pnet');\n    var conv4_1 = extractConvParams('pnet/conv4_1');\n    var conv4_2 = extractConvParams('pnet/conv4_2');\n    return __assign(__assign({}, sharedParams), {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams('rnet');\n    var fc1 = extractFCParams('rnet/fc1');\n    var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams('rnet/fc2_1');\n    var fc2_2 = extractFCParams('rnet/fc2_2');\n    return __assign(__assign({}, sharedParams), {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n\n  function extractONetParams() {\n    var sharedParams = extractSharedParams('onet');\n    var conv4 = extractConvParams('onet/conv4');\n    var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');\n    var fc1 = extractFCParams('onet/fc1');\n    var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');\n    var fc2_1 = extractFCParams('onet/fc2_1');\n    var fc2_2 = extractFCParams('onet/fc2_2');\n    var fc2_3 = extractFCParams('onet/fc2_3');\n    return __assign(__assign({}, sharedParams), {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractPNetParams = _a.extractPNetParams,\n      extractRNetParams = _a.extractRNetParams,\n      extractONetParams = _a.extractONetParams;\n\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["disposeUnusedWeightTensors","extractWeightEntryFactory","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractConvParams","prefix","filters","bias","extractFCParams","weights","extractPReluParams","paramPath","extractSharedParams","conv1","prelu1_alpha","conv2","prelu2_alpha","conv3","prelu3_alpha","extractPNetParams","sharedParams","conv4_1","conv4_2","extractRNetParams","fc1","prelu4_alpha","fc2_1","fc2_2","extractONetParams","conv4","prelu5_alpha","fc2_3","extractParamsFromWeigthMap","pnet","rnet","onet","params"],"sources":["../../../src/mtcnn/extractParamsFromWeigthMap.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}