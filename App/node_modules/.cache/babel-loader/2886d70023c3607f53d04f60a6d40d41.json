{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { convDown } from './convLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { residual, residualDown } from './residualLayer';\n\nvar FaceRecognitionNet =\n/** @class */\nfunction (_super) {\n  __extends(FaceRecognitionNet, _super);\n\n  function FaceRecognitionNet() {\n    return _super.call(this, 'FaceRecognitionNet') || this;\n  }\n\n  FaceRecognitionNet.prototype.forwardInput = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('FaceRecognitionNet - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(150, true).toFloat();\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = convDown(normalized, params.conv32_down);\n      out = tf.maxPool(out, 3, 2, 'valid');\n      out = residual(out, params.conv32_1);\n      out = residual(out, params.conv32_2);\n      out = residual(out, params.conv32_3);\n      out = residualDown(out, params.conv64_down);\n      out = residual(out, params.conv64_1);\n      out = residual(out, params.conv64_2);\n      out = residual(out, params.conv64_3);\n      out = residualDown(out, params.conv128_down);\n      out = residual(out, params.conv128_1);\n      out = residual(out, params.conv128_2);\n      out = residualDown(out, params.conv256_down);\n      out = residual(out, params.conv256_1);\n      out = residual(out, params.conv256_2);\n      out = residualDown(out, params.conv256_down_out);\n      var globalAvg = out.mean([1, 2]);\n      var fullyConnected = tf.matMul(globalAvg, params.fc);\n      return fullyConnected;\n    });\n  };\n\n  FaceRecognitionNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  FaceRecognitionNet.prototype.computeFaceDescriptor = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, faceDescriptorTensors, faceDescriptorsForBatch;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _a.sent();\n            faceDescriptorTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4\n            /*yield*/\n            , Promise.all(faceDescriptorTensors.map(function (t) {\n              return t.data();\n            }))];\n\n          case 2:\n            faceDescriptorsForBatch = _a.sent();\n            faceDescriptorTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2\n            /*return*/\n            , netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0]];\n        }\n      });\n    });\n  };\n\n  FaceRecognitionNet.prototype.getDefaultModelName = function () {\n    return 'face_recognition_model';\n  };\n\n  FaceRecognitionNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n\n  FaceRecognitionNet.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  return FaceRecognitionNet;\n}(NeuralNetwork);\n\nexport { FaceRecognitionNet };","map":{"version":3,"mappings":"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","names":["tf","toNetInput","NeuralNetwork","normalize","convDown","extractParams","extractParamsFromWeigthMap","residual","residualDown","__extends","_super","FaceRecognitionNet","input","params","Error","tidy","batchTensor","toBatchTensor","toFloat","meanRgb","normalized","div","scalar","out","conv32_down","maxPool","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","globalAvg","mean","fullyConnected","matMul","fc","_a","forwardInput","_b","netInput","faceDescriptorTensors","unstack","_this","Promise","all","map","data","faceDescriptorsForBatch","forEach","dispose","isBatchInput","weightMap","weights"],"sources":["../../../src/faceRecognitionNet/FaceRecognitionNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}