{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractConvParamsFactory, extractFCParamsFactory, extractWeightsFactory } from '../common';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n  var extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);\n\n  function extractPReluParams(size, paramPath) {\n    var alpha = tf.tensor1d(extractWeights(size));\n    paramMappings.push({\n      paramPath: paramPath\n    });\n    return alpha;\n  }\n\n  function extractSharedParams(numFilters, mappedPrefix, isRnet) {\n    if (isRnet === void 0) {\n      isRnet = false;\n    }\n\n    var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams([3, 10, 16, 32], 'pnet');\n    var conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1');\n    var conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2');\n    return __assign(__assign({}, sharedParams), {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams([3, 28, 48, 64], 'rnet', true);\n    var fc1 = extractFCParams(576, 128, 'rnet/fc1');\n    var prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1');\n    var fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2');\n    return __assign(__assign({}, sharedParams), {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n\n  function extractONetParams() {\n    var sharedParams = extractSharedParams([3, 32, 64, 64], 'onet');\n    var conv4 = extractConvParams(64, 128, 2, 'onet/conv4');\n    var prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha');\n    var fc1 = extractFCParams(1152, 256, 'onet/fc1');\n    var prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha');\n    var fc2_1 = extractFCParams(256, 2, 'onet/fc2_1');\n    var fc2_2 = extractFCParams(256, 4, 'onet/fc2_2');\n    var fc2_3 = extractFCParams(256, 10, 'onet/fc2_3');\n    return __assign(__assign({}, sharedParams), {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\n\nexport function extractParams(weights) {\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var paramMappings = [];\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractPNetParams = _b.extractPNetParams,\n      extractRNetParams = _b.extractRNetParams,\n      extractONetParams = _b.extractONetParams;\n\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["tf","extractConvParamsFactory","extractFCParamsFactory","extractWeightsFactory","extractorsFactory","extractWeights","paramMappings","extractConvParams","extractFCParams","extractPReluParams","size","paramPath","alpha","tensor1d","push","extractSharedParams","numFilters","mappedPrefix","isRnet","conv1","prelu1_alpha","conv2","prelu2_alpha","conv3","prelu3_alpha","extractPNetParams","sharedParams","conv4_1","conv4_2","extractRNetParams","fc1","prelu4_alpha","fc2_1","fc2_2","extractONetParams","conv4","prelu5_alpha","fc2_3","extractParams","weights","getRemainingWeights","pnet","rnet","onet","length","Error","params"],"sources":["../../../src/mtcnn/extractParams.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}