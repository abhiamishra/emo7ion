{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock3 } from './denseBlock';\nimport { extractParamsFromWeigthMapTiny } from './extractParamsFromWeigthMapTiny';\nimport { extractParamsTiny } from './extractParamsTiny';\n\nvar TinyFaceFeatureExtractor =\n/** @class */\nfunction (_super) {\n  __extends(TinyFaceFeatureExtractor, _super);\n\n  function TinyFaceFeatureExtractor() {\n    return _super.call(this, 'TinyFaceFeatureExtractor') || this;\n  }\n\n  TinyFaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('TinyFaceFeatureExtractor - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock3(normalized, params.dense0, true);\n      out = denseBlock3(out, params.dense1);\n      out = denseBlock3(out, params.dense2);\n      out = tf.avgPool(out, [14, 14], [2, 2], 'valid');\n      return out;\n    });\n  };\n\n  TinyFaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  TinyFaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_tiny_model';\n  };\n\n  TinyFaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMapTiny(weightMap);\n  };\n\n  TinyFaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParamsTiny(weights);\n  };\n\n  return TinyFaceFeatureExtractor;\n}(NeuralNetwork);\n\nexport { TinyFaceFeatureExtractor };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AAEA,SAA8BC,UAA9B,QAAgD,QAAhD;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,8BAAT,QAA+C,kCAA/C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAGA;AAAA;AAAA;AAA8CC;;AAE5C;WACEC,kBAAM,0BAAN,KAAiC;AAClC;;AAEMC,oDAAP,UAAoBC,KAApB,EAAmC;AAEzB;;AAER,QAAI,CAACC,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,WAAOZ,EAAE,CAACa,IAAH,CAAQ;AACb,UAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAN,CAAoB,GAApB,EAAyB,IAAzB,CAApB;AACA,UAAMC,OAAO,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB;AACA,UAAMC,UAAU,GAAGd,SAAS,CAACW,WAAD,EAAcE,OAAd,CAAT,CAAgCE,GAAhC,CAAoClB,EAAE,CAACmB,MAAH,CAAU,GAAV,CAApC,CAAnB;AAEA,UAAIC,GAAG,GAAGhB,WAAW,CAACa,UAAD,EAAaN,MAAM,CAACU,MAApB,EAA4B,IAA5B,CAArB;AACAD,SAAG,GAAGhB,WAAW,CAACgB,GAAD,EAAMT,MAAM,CAACW,MAAb,CAAjB;AACAF,SAAG,GAAGhB,WAAW,CAACgB,GAAD,EAAMT,MAAM,CAACY,MAAb,CAAjB;AACAH,SAAG,GAAGpB,EAAE,CAACwB,OAAH,CAAWJ,GAAX,EAAgB,CAAC,EAAD,EAAK,EAAL,CAAhB,EAA0B,CAAC,CAAD,EAAI,CAAJ,CAA1B,EAAkC,OAAlC,CAAN;AAEA,aAAOA,GAAP;AACD,KAXM,CAAP;AAYD,GApBM;;AAsBMX,+CAAb,UAAqBC,KAArB,EAAqC;;;;;;;AAC5Be,sBAAKC,YAAL;AAAkB;AAAA;AAAA,cAAMzB,UAAU,CAACS,KAAD,CAAhB;;;AAAzB;AAAA;AAAA,cAAOe,eAAI,CAAcE,SAAd,CAAJ,CAAP;;;;AACD,GAFY;;AAIHlB,2DAAV;AACE,WAAO,mCAAP;AACD,GAFS;;AAIAA,kEAAV,UAAqCmB,SAArC,EAAiE;AAC/D,WAAOvB,8BAA8B,CAACuB,SAAD,CAArC;AACD,GAFS;;AAIAnB,qDAAV,UAAwBoB,OAAxB,EAA6C;AAC3C,WAAOvB,iBAAiB,CAACuB,OAAD,CAAxB;AACD,GAFS;;AAGZ;AA3CA,EAA8C3B,aAA9C","names":["tf","toNetInput","NeuralNetwork","normalize","denseBlock3","extractParamsFromWeigthMapTiny","extractParamsTiny","__extends","_super","TinyFaceFeatureExtractor","input","params","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","out","dense0","dense1","dense2","avgPool","_a","forwardInput","_b","weightMap","weights"],"sources":["../../../src/faceFeatureExtractor/TinyFaceFeatureExtractor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}