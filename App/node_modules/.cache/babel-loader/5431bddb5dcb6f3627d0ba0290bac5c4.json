{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { createCanvas, createCanvasFromMedia, getContext2dOrThrow } from '../dom';\nimport { env } from '../env';\nimport { normalize } from './normalize';\nexport function extractImagePatches(img, boxes, _a) {\n  var width = _a.width,\n      height = _a.height;\n  return __awaiter(this, void 0, void 0, function () {\n    var imgCtx, bitmaps, imagePatchesDatas;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          imgCtx = getContext2dOrThrow(img);\n          return [4\n          /*yield*/\n          , Promise.all(boxes.map(function (box) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, y, ey, x, ex, fromX, fromY, imgData;\n\n              return __generator(this, function (_b) {\n                _a = box.padAtBorders(img.height, img.width), y = _a.y, ey = _a.ey, x = _a.x, ex = _a.ex;\n                fromX = x - 1;\n                fromY = y - 1;\n                imgData = imgCtx.getImageData(fromX, fromY, ex - fromX, ey - fromY);\n                return [2\n                /*return*/\n                , env.isNodejs() ? createCanvasFromMedia(imgData) : createImageBitmap(imgData)];\n              });\n            });\n          }))];\n\n        case 1:\n          bitmaps = _b.sent();\n          imagePatchesDatas = [];\n          bitmaps.forEach(function (bmp) {\n            var patch = createCanvas({\n              width: width,\n              height: height\n            });\n            var patchCtx = getContext2dOrThrow(patch);\n            patchCtx.drawImage(bmp, 0, 0, width, height);\n            var data = patchCtx.getImageData(0, 0, width, height).data;\n            var currData = []; // RGBA -> BGR\n\n            for (var i = 0; i < data.length; i += 4) {\n              currData.push(data[i + 2]);\n              currData.push(data[i + 1]);\n              currData.push(data[i]);\n            }\n\n            imagePatchesDatas.push(currData);\n          });\n          return [2\n          /*return*/\n          , imagePatchesDatas.map(function (data) {\n            var t = tf.tidy(function () {\n              var imagePatchTensor = tf.transpose(tf.tensor4d(data, [1, width, height, 3]), [0, 2, 1, 3]).toFloat();\n              return normalize(imagePatchTensor);\n            });\n            return t;\n          })];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AAGA,SAASC,YAAT,EAAuBC,qBAAvB,EAA8CC,mBAA9C,QAAyE,QAAzE;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAM,SAAgBC,mBAAhB,CACJC,GADI,EAEJC,KAFI,EAGJC,EAHI,EAG0B;MAA5BC;MAAOC;;;;;;;;;AAIHC,gBAAM,GAAGT,mBAAmB,CAACI,GAAD,CAA5B;AAEU;AAAA;AAAA,YAAMM,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,GAAN,CAAU,UAAMC,GAAN,EAAS;AAAA;;;;AAE7CP,qBAAmBO,GAAG,CAACC,YAAJ,CAAiBV,GAAG,CAACI,MAArB,EAA6BJ,GAAG,CAACG,KAAjC,CAAnB,EAAEQ,CAAC,OAAH,EAAKC,EAAE,QAAP,EAASC,CAAC,OAAV,EAAYC,EAAE,QAAd;AAEAC,qBAAK,GAAGF,CAAC,GAAG,CAAZ;AACAG,qBAAK,GAAGL,CAAC,GAAG,CAAZ;AACAM,uBAAO,GAAGZ,MAAM,CAACa,YAAP,CAAoBH,KAApB,EAA2BC,KAA3B,EAAmCF,EAAE,GAAGC,KAAxC,EAAiDH,EAAE,GAAGI,KAAtD,CAAV;AAEN;AAAA;AAAA,kBAAOnB,GAAG,CAACsB,QAAJ,KAAiBxB,qBAAqB,CAACsB,OAAD,CAAtC,GAAkDG,iBAAiB,CAACH,OAAD,CAA1E;;aARmD;AASpD,WATiC,CAAZ,CAAN;;;AAAVI,iBAAO,GAAGC,SAAV;AAWAC,2BAAiB,GAAe,EAAhC;AAENF,iBAAO,CAACG,OAAR,CAAgB,eAAG;AACjB,gBAAMC,KAAK,GAAG/B,YAAY,CAAC;AAAES,mBAAK,OAAP;AAASC,oBAAM;AAAf,aAAD,CAA1B;AACA,gBAAMsB,QAAQ,GAAG9B,mBAAmB,CAAC6B,KAAD,CAApC;AACAC,oBAAQ,CAACC,SAAT,CAAmBC,GAAnB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8BzB,KAA9B,EAAqCC,MAArC;AACQ;AAER,gBAAMyB,QAAQ,GAAG,EAAjB,CANiB,CAOjB;;AACA,iBAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGC,IAAI,CAACC,MAAxB,EAAgCF,CAAC,IAAE,CAAnC,EAAsC;AACpCD,sBAAQ,CAACI,IAAT,CAAcF,IAAI,CAACD,CAAC,GAAG,CAAL,CAAlB;AACAD,sBAAQ,CAACI,IAAT,CAAcF,IAAI,CAACD,CAAC,GAAG,CAAL,CAAlB;AACAD,sBAAQ,CAACI,IAAT,CAAcF,IAAI,CAACD,CAAD,CAAlB;AACD;;AACDP,6BAAiB,CAACU,IAAlB,CAAuBJ,QAAvB;AACD,WAdD;AAiBA;AAAA;AAAA,YAAON,iBAAiB,CAACf,GAAlB,CAAsB,gBAAI;AAC/B,gBAAM0B,CAAC,GAAGzC,EAAE,CAAC0C,IAAH,CAAQ;AAChB,kBAAMC,gBAAgB,GAAG3C,EAAE,CAAC4C,SAAH,CACvB5C,EAAE,CAAC6C,QAAH,CAAYP,IAAZ,EAAkB,CAAC,CAAD,EAAI5B,KAAJ,EAAWC,MAAX,EAAmB,CAAnB,CAAlB,CADuB,EAEvB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFuB,EAGvBmC,OAHuB,EAAzB;AAKA,qBAAOzC,SAAS,CAACsC,gBAAD,CAAhB;AACD,aAPS,CAAV;AAQA,mBAAOF,CAAP;AACD,WAVM,CAAP;;;;AAWD","names":["tf","createCanvas","createCanvasFromMedia","getContext2dOrThrow","env","normalize","extractImagePatches","img","boxes","_a","width","height","imgCtx","Promise","all","map","box","padAtBorders","y","ey","x","ex","fromX","fromY","imgData","getImageData","isNodejs","createImageBitmap","bitmaps","_b","imagePatchesDatas","forEach","patch","patchCtx","drawImage","bmp","currData","i","data","length","push","t","tidy","imagePatchTensor","transpose","tensor4d","toFloat"],"sources":["../../../src/mtcnn/extractImagePatches.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}